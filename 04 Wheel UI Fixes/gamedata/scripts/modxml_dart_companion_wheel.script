DART.COMPANION_WHEEL = {}


local path  = "ui\\ui_wheel_companion%s.xml"
local log   = DART.createLogger("COMPANION_WHEEL")
local cache = DART.createCache("COMPANION_WHEEL")


-- the wheels are easy to handle, every element just needs their
-- 'x' and 'width' scaled for aspect ratio, <wheel> and <info> are
-- the only exceptions since they need to be centered
function parseDXML(DXML, xmlAspectRatio)
  local factor = DART.getAspectRatio() / xmlAspectRatio
  local scale  = DART.createScaleFunction(DXML, factor)

  local wheel, info, health, weight =
    DXML:query("wheel")[1],
    DXML:query("info")[1],
    DXML:query("info > health")[1],
    DXML:query("info > weight")[1]

  if wheel then
    -- keep wheel centered after resize
    DART.editAttributes(DXML, wheel, function(attrs)
      local newWidth = attrs.width / factor
      return {
        width = newWidth,
        x = attrs.x + (attrs.width - newWidth) / 2
      }
    end)

    DXML:iterateChildren(wheel, function(child)
      scale(child, "width", "x")
    end)
  end

  if info then
    -- keep info centered after resize
    DART.editAttributes(DXML, info, function(attrs)
      local newWidth = attrs.width / factor
      return {
        width = newWidth,
        x = attrs.x + (attrs.width - newWidth) / 2
      }
    end)

    DXML:iterateChildren(info, function(child)
      scale(child, "width", "x")
    end)

    -- info health
    if health then
      DXML:iterateChildren(health, function(child)
        if DXML:isElement(child) then
          scale(child, "width", "x")
        end
      end)
    end

    -- info weight
    if weight then
      DXML:iterateChildren(weight, function(child)
        if DXML:isElement(child) then
          scale(child, "width", "x")
        end
      end)
    end
  end
end


function onXMLRead(filename, DXML)
  local postfix = DART.checkFilename(filename, path)

  if not postfix then
    return
  end

  -- force ui_wheel_companion_16.xml
  if postfix == "_43" then
    log("Replacing ui_wheel_companion.xml with ui_wheel_companion_16.xml")
    return DART.replaceDXML(DXML, string.format(path, "_16"))
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  log("Parsing " .. filename)

  parseDXML(DXML, DART.aspectRatioLookup[postfix])
  cache.set(filename, DXML)
end


function on_xml_read()
  if DART.getAspectRatioVs16x9() > 1 then
    RegisterScriptCallback("on_xml_read", onXMLRead)
  else
    log("Disabled because aspect ratio is not ultrawide")
  end
end
