DART.MINIMAP = {}


local log = DART.logger"MINIMAP"
local setCache, applyCache = DART.cache"MINIMAP"


ELEMENT_QUERIES = {
  map = "minimap > level_frame",
  background = "minimap > background",
  compass = "minimap > compass",
  clock = "minimap > clock_wnd",
}


-- read config values from XML
function collectSettings(DXML, elements, xmlAspectRatio)
  local settings = {}
  copy_table(settings, DART.MINIMAP)

  local background, compass, clock, map =
    elements.background,
    elements.compass,
    elements.clock,
    elements.map

  local bgAttrs, compassAttrs, clockAttrs, mapAttrs =
    DXML:getElementAttr(background),
    DXML:getElementAttr(compass),
    DXML:getElementAttr(clock),
    DXML:getElementAttr(map)

  if not settings.size then
    settings.size = {
      x = compassAttrs.width,
      y = compassAttrs.height,
    }
  end

  if not settings.mapRatio then
    settings.mapRatio = {
      x = mapAttrs.width  * DART.baseHeight / compassAttrs.width,
      y = mapAttrs.height * DART.baseHeight / compassAttrs.height,
    }
  end

  if not settings.align then
    settings.align = {}

    local xthirds = math.floor(mapAttrs.x * 3 / DART.aspectRatio4x3)
    local ythirds = math.floor(mapAttrs.y * 3)

    if xthirds == 0 then
      settings.align.x = "LEFT"
    elseif xthirds == 1 then
      settings.align.x = "CENTER"
    else
      settings.align.x = "RIGHT"
    end

    if ythirds == 0 then
      settings.align.y = "TOP"
    elseif ythirds == 1 then
      settings.align.y = "CENTER"
    else
      settings.align.y = "BOTTOM"
    end
  end

  if not settings.offset then
    settings.offset = {}

    local x = mapAttrs.x * DART.baseHeight * xmlAspectRatio / DART.aspectRatio4x3
    local y = mapAttrs.y * DART.baseHeight

    local l = x - compassAttrs.width  / 2
    local t = y - compassAttrs.height / 2
    local r = x + compassAttrs.width  / 2
    local b = y + compassAttrs.height / 2

    if settings.align.x == "LEFT" then
      settings.offset.x = l
    elseif settings.align.x == "CENTER" then
      settings.offset.x = x - DART.baseHeight * xmlAspectRatio / 2
    else
      settings.offset.x = r - DART.baseHeight * xmlAspectRatio
    end

    if settings.align.y == "TOP" then
      settings.offset.y = t
    elseif settings.align.y == "CENTER" then
      settings.offset.y = y - DART.baseHeight / 2
    else
      settings.offset.y = b - DART.baseHeight
    end
  end

  -- default minimap appears to use height for both
  local hbg = DART.baseHeight * bgAttrs.height
  local wbg = hbg

  local xclock = wbg * clockAttrs.x - (wbg - compassAttrs.width) / 2
  local yclock = hbg * clockAttrs.y - (hbg - compassAttrs.height) / 2

  if not settings.clockAlign then
    settings.clockAlign = {}

    local xratio = xclock / compassAttrs.width
    local yratio = yclock / compassAttrs.height

    if xratio > 2/3 then
      settings.clockAlign.x = "RIGHT"
    elseif xratio > 1/3 then
      settings.clockAlign.x = "CENTER"
    else
      settings.clockAlign.x = "LEFT"
    end

    if yratio > 2/3 then
      settings.clockAlign.y = "BOTTOM"
    elseif yratio > 1/3 then
      settings.clockAlign.y = "CENTER"
    else
      settings.clockAlign.y = "TOP"
    end
  end

  if not settings.clockOffset then
    settings.clockOffset = {}

    if settings.clockAlign.x == "LEFT" then
      settings.clockOffset.x = xclock
    elseif settings.clockAlign.x == "CENTER" then
      settings.clockOffset.x = xclock - compassAttrs.width / 2
    else
      settings.clockOffset.x = xclock - compassAttrs.width
    end

    if settings.clockAlign.y == "LEFT" then
      settings.clockOffset.y = yclock
    elseif settings.clockAlign.y == "CENTER" then
      settings.clockOffset.y = yclock - compassAttrs.height / 2
    else
      settings.clockOffset.y = yclock - compassAttrs.height
    end
  end

  return settings
end


function adjustMap(DXML, elements, settings)
  local size, offset, mapRatio, align, alpha, map =
    settings.size,
    settings.offset,
    settings.mapRatio,
    settings.align,
    settings.alpha,
    elements.map

  if not map then
    return
  end

  local width  = settings.size.x * settings.mapRatio.x / DART.baseHeight
  local height = settings.size.y * settings.mapRatio.y / DART.baseHeight

  local x = (size.x / 2 + offset.x) / DART.baseHeight / DART.getAspectRatioVs4x3()
  local y = (size.y / 2 + offset.y) / DART.baseHeight

  if align.x == "CENTER" then
    x = DART.aspectRatio4x3 / 2 + offset.x / DART.baseHeight / DART.getAspectRatioVs4x3()
  elseif align.x == "RIGHT" then
    x = DART.aspectRatio4x3 - (size.x / 2 - offset.x) / DART.baseHeight / DART.getAspectRatioVs4x3()
  end

  if align.y == "CENTER" then
    y = (DART.baseHeight / 2 + offset.y) / DART.baseHeight
  elseif align.y == "BOTTOM" then
    y = (DART.baseHeight - size.y / 2 + offset.y) / DART.baseHeight
  end

  DXML:setElementAttr(map, {
    width = width,
    height = height,
    x = x,
    y = y,
  })

  if alpha then
    DXML:setElementAttr(map, {a = alpha})
  end
end


function adjustCompass(DXML, elements, settings)
  local compass, size =
    elements.compass,
    settings.size

  if compass then
    DXML:setElementAttr(compass, {width = size.x, height = size.y})
  end
end


function adjustClock(DXML, elements, settings)
  local clock, background, size, clockAlign, clockOffset =
    elements.clock,
    elements.background,
    settings.size,
    settings.clockAlign,
    settings.clockOffset

  if not (clock and background) then
    return
  end

  local wclock = DXML:getElementAttr(clock).width
  local hclock = DXML:getElementAttr(clock).height

  -- default minimap appears to use height for both
  local hbg = DXML:getElementAttr(background).height * DART.baseHeight
  local wbg = hbg

  local x = (wbg - size.x) / 2 / wbg + clockOffset.x / size.x
  local y = (hbg - size.y) / 2 / hbg + clockOffset.y / size.y

  if clockAlign.x == "CENTER" then
    x = 0.5 + clockOffset.x / size.x
  elseif clockAlign.x == "RIGHT" then
    x = 1 - (wbg - size.x) / 2 / wbg + clockOffset.x / size.x
  end

  if clockAlign.y == "CENTER" then
    y = 0.5 + clockOffset.y / size.y
  elseif clockAlign.y == "BOTTOM" then
    y = 1 - (hbg - size.y) / 2 / hbg + clockOffset.y / size.y
  end

  DXML:setElementAttr(clock, {x = x, y = y})
end


function onReadZoneMapXML(filename, DXML)
  if
    not filename:match([[^ui\zone_map]])
    or DART.getAspectRatioVs16x9() <= 1
  then
    return
  elseif
    filename ~= [[ui\zone_map_16.xml]]
    and not DART.MINIMAP.disableForceZoneMap16
  then
    DART.replaceDXML(DXML, [[ui\zone_map_16.xml]])
    return
  end

  if applyCache(filename, DXML) then
    return
  end

  local xmlAspectRatio

  if filename == [[ui\zone_map_21.xml]] then
    xmlAspectRatio = DART.aspectRatio21x9
  elseif filename == [[ui\zone_map_16.xml]] then
    xmlAspectRatio = DART.aspectRatio16x9
  elseif filename == [[ui\zone_map.xml]] then
    xmlAspectRatio = DART.aspectRatio4x3
  else
    return
  end

  log("Parsing " .. filename)

  local elements = DART.collectElements(DXML, ELEMENT_QUERIES)
  local settings = collectSettings(DXML, elements, xmlAspectRatio)

  adjustMap(DXML, elements, settings)
  adjustCompass(DXML, elements, settings)
  adjustClock(DXML, elements, settings)

  setCache(filename, DXML)
end


function on_xml_read()
  RegisterScriptCallback("on_xml_read", onReadZoneMapXML)
end
