DART.MINIMAP = {}


local path  = "ui\\zone_map%s.xml"
local log   = DART.createLogger("MINIMAP")
local cache = DART.createCache("MINIMAP")


-- derive config setttings from XML
function collectSettings(DXML, xmlAspectRatio)
  local settings = {}
  copy_table(settings, DART.MINIMAP)

  local map, background, compass, clock =
    DXML:query("minimap > level_frame")[1],
    DXML:query("minimap > background")[1],
    DXML:query("minimap > compass")[1],
    DXML:query("minimap > clock_wnd")[1]

  local mapAttrs, bgAttrs, compassAttrs, clockAttrs =
    DXML:getElementAttr(map),
    DXML:getElementAttr(background),
    DXML:getElementAttr(compass),
    DXML:getElementAttr(clock)

  -- compass size
  if not settings.size then
    settings.size = {
      x = compassAttrs.width,
      y = compassAttrs.height,
    }
  end

  -- level size
  if not settings.mapRatio then
    settings.mapRatio = {
      x = mapAttrs.width  * DART.baseHeight / compassAttrs.width,
      y = mapAttrs.height * DART.baseHeight / compassAttrs.height,
    }
  end

  -- compass alignment
  if not settings.align then
    settings.align = {}

    local xthirds = math.floor(mapAttrs.x * 3 / DART.aspectRatio4x3)
    local ythirds = math.floor(mapAttrs.y * 3)

    if xthirds == 0 then
      settings.align.x = "LEFT"
    elseif xthirds == 1 then
      settings.align.x = "CENTER"
    else
      settings.align.x = "RIGHT"
    end

    if ythirds == 0 then
      settings.align.y = "TOP"
    elseif ythirds == 1 then
      settings.align.y = "CENTER"
    else
      settings.align.y = "BOTTOM"
    end
  end

  -- compass offset
  if not settings.offset then
    settings.offset = {}

    local x = mapAttrs.x * DART.baseHeight * xmlAspectRatio / DART.aspectRatio4x3
    local y = mapAttrs.y * DART.baseHeight

    local l = x - compassAttrs.width  / 2
    local t = y - compassAttrs.height / 2
    local r = x + compassAttrs.width  / 2
    local b = y + compassAttrs.height / 2

    if settings.align.x == "LEFT" then
      settings.offset.x = l
    elseif settings.align.x == "CENTER" then
      settings.offset.x = x - DART.baseHeight * xmlAspectRatio / 2
    else
      settings.offset.x = r - DART.baseHeight * xmlAspectRatio
    end

    if settings.align.y == "TOP" then
      settings.offset.y = t
    elseif settings.align.y == "CENTER" then
      settings.offset.y = y - DART.baseHeight / 2
    else
      settings.offset.y = b - DART.baseHeight
    end
  end

  -- circular minimaps don't use width
  local hbg = DART.baseHeight * bgAttrs.height
  local wbg = hbg

  local xclock = wbg * clockAttrs.x - (wbg - compassAttrs.width) / 2
  local yclock = hbg * clockAttrs.y - (hbg - compassAttrs.height) / 2

  -- clock alignment
  if not settings.clockAlign then
    settings.clockAlign = {}

    local xratio = xclock / compassAttrs.width
    local yratio = yclock / compassAttrs.height

    if xratio > 2/3 then
      settings.clockAlign.x = "RIGHT"
    elseif xratio > 1/3 then
      settings.clockAlign.x = "CENTER"
    else
      settings.clockAlign.x = "LEFT"
    end

    if yratio > 2/3 then
      settings.clockAlign.y = "BOTTOM"
    elseif yratio > 1/3 then
      settings.clockAlign.y = "CENTER"
    else
      settings.clockAlign.y = "TOP"
    end
  end

  -- clock offset
  if not settings.clockOffset then
    settings.clockOffset = {}

    if settings.clockAlign.x == "LEFT" then
      settings.clockOffset.x = xclock
    elseif settings.clockAlign.x == "CENTER" then
      settings.clockOffset.x = xclock - compassAttrs.width / 2
    else
      settings.clockOffset.x = xclock - compassAttrs.width
    end

    if settings.clockAlign.y == "LEFT" then
      settings.clockOffset.y = yclock
    elseif settings.clockAlign.y == "CENTER" then
      settings.clockOffset.y = yclock - compassAttrs.height / 2
    else
      settings.clockOffset.y = yclock - compassAttrs.height
    end
  end

  return settings
end


-- the minimap doesn't stretch in ultrawide
-- but it uses bizarre units for size and position (pixel value / 768)
-- it also determines the {x, y} for all elements for some reason
function adjustMap(DXML, settings)
  local map = DXML:query("minimap > level_frame")[1]

  if not map then
    return
  end

  local size, offset, mapRatio, align, alpha =
    settings.size,
    settings.offset,
    settings.mapRatio,
    settings.align,
    settings.alpha

  local width  = settings.size.x * settings.mapRatio.x / DART.baseHeight
  local height = settings.size.y * settings.mapRatio.y / DART.baseHeight

  local x = (size.x / 2 + offset.x) / DART.baseHeight / DART.getAspectRatioVs4x3()
  local y = (size.y / 2 + offset.y) / DART.baseHeight

  if align.x == "CENTER" then
    x = DART.aspectRatio4x3 / 2 + offset.x / DART.baseHeight / DART.getAspectRatioVs4x3()
  elseif align.x == "RIGHT" then
    x = DART.aspectRatio4x3 - (size.x / 2 - offset.x) / DART.baseHeight / DART.getAspectRatioVs4x3()
  end

  if align.y == "CENTER" then
    y = (DART.baseHeight / 2 + offset.y) / DART.baseHeight
  elseif align.y == "BOTTOM" then
    y = (DART.baseHeight - size.y / 2 + offset.y) / DART.baseHeight
  end

  DXML:setElementAttr(map, {
    width = width,
    height = height,
    x = x,
    y = y,
  })

  if alpha then
    DXML:setElementAttr(map, {a = alpha})
  end
end


-- position is now a fraction relative to <background>
-- and we're suddenly back to sizes in pixels
function adjustCompass(DXML, settings)
  local compass = DXML:query("minimap > compass")[1]
  local size    = settings.size

  if compass then
    DXML:setElementAttr(compass, {width = size.x, height = size.y})
  end
end


-- also positioned as a fraction relative to <background>
-- background is a lot bigger than you'd think in the default circular
-- minimap, so positions are translated to <compass> to make
-- 'clockOffset' and 'clockAlign' more intuitive to set
function adjustClock(DXML, settings)
  local background, clock =
    DXML:query("minimap > background")[1],
    DXML:query("minimap > clock_wnd")[1]

  local size, clockAlign, clockOffset =
    settings.size,
    settings.clockAlign,
    settings.clockOffset

  if not (clock and background) then
    return
  end

  local wclock = DXML:getElementAttr(clock).width
  local hclock = DXML:getElementAttr(clock).height

  -- default minimap appears to use height for both
  local hbg = DXML:getElementAttr(background).height * DART.baseHeight
  local wbg = hbg

  local x = (wbg - size.x) / 2 / wbg + clockOffset.x / size.x
  local y = (hbg - size.y) / 2 / hbg + clockOffset.y / size.y

  if clockAlign.x == "CENTER" then
    x = 0.5 + clockOffset.x / size.x
  elseif clockAlign.x == "RIGHT" then
    x = 1 - (wbg - size.x) / 2 / wbg + clockOffset.x / size.x
  end

  if clockAlign.y == "CENTER" then
    y = 0.5 + clockOffset.y / size.y
  elseif clockAlign.y == "BOTTOM" then
    y = 1 - (hbg - size.y) / 2 / hbg + clockOffset.y / size.y
  end

  DXML:setElementAttr(clock, {x = x, y = y})
end


-- detect if we've been given the broken circular zone_map_21 file
-- so we can force load zone_map_16.xml in its place -- contents are identical
-- to a legit square minimap file, but the user can disable minimap fixes
-- if they want to use the square minimap
function isDefaultZoneMap(DXML)
  local map = DXML:query("minimap > level_frame")[1]
  return map and DXML:getElementAttr(map).rounded == "0"
end


function onXMLRead(filename, DXML)
  local postfix = DART.checkFilename(filename, path)

  if not postfix then
    return
  end

  -- force zone_map_16.xml
  if postfix == "_43" then
    log("Replacing zone_map.xml with zone_map_16.xml")
    return DART.replaceDXML(DXML, string.format(path, "_16"))
  elseif postfix == "_21" and isDefaultZoneMap(DXML) then
    log("Replacing default zone_map_21.xml with zone_map_16.xml")
    return DART.replaceDXML(DXML, string.format(path, "_16"))
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  log("Parsing " .. filename)

  local settings = collectSettings(DXML,  DART.aspectRatioLookup[postfix])

  adjustMap(DXML, settings)
  adjustCompass(DXML, settings)
  adjustClock(DXML, settings)

  cache.set(filename, DXML)
end


function on_xml_read()
  if DART.getAspectRatioVs16x9() > 1 then
    RegisterScriptCallback("on_xml_read", onXMLRead)
  else
    log("Disabled because aspect ratio is not ultrawide")
  end
end
