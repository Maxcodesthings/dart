DART.SCOPES = {}


local log = DART.logger"SCOPES"
local setCache, applyCache = DART.cache"SCOPES"


-- dynamically center and un-stretch scope texture
-- dynamically adjust left and right sides to fill remaining space
function resizeScope(DXML, scope)
  local elements = DXML:query("auto_static", scope)

  -- only handle scopes with 3 parts (main, left, right)
  if not elements or #elements ~= 3 then
    return
  end

  local w1 = tonumber(DXML:getElementAttr(elements[1]).width)
  local w2 = tonumber(DXML:getElementAttr(elements[2]).width)
  local w3 = tonumber(DXML:getElementAttr(elements[3]).width)

  -- skip scopes with textures in the wrong order
  if w1 < w2 or w1 < w3 then
    return
  end

  local textureWidth = DART.baseWidth / DART.getAspectRatioVs4x3()
  local fillerWidth  = (DART.baseWidth - textureWidth) / 2

  -- scope texture
  DXML:setElementAttr(elements[1], {
    x = fillerWidth,
    width = textureWidth,
  })

  -- left filler
  DXML:setElementAttr(elements[2], {
    width = fillerWidth
  })

  -- right filler
  DXML:setElementAttr(elements[3], {
    x = fillerWidth + textureWidth,
    width = fillerWidth,
  })
end


function onReadScopesXML(filename, DXML)
  if
    not filename:match([[^ui\scopes]])
    or DART.getAspectRatioVs16x9() <= 1
  then
    return
  end

  if applyCache(filename, DXML) then
    return
  end

  log("Parsing " .. filename)

  DXML:iterateChildren(DXML:getRoot(), function(element)
    resizeScope(DXML, element)
  end)

  setCache(filename, DXML)
end


function on_xml_read()
  RegisterScriptCallback("on_xml_read", onReadScopesXML)
end
