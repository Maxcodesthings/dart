DART.HEALTH_HUD = {}

local log   = DART.createLogger("HEALTH_HUD")
local cache = DART.createCache("HEALTH_HUD")

local customMsgsPath = "ui\\ui_custom_msgs%s.xml"
local bodyHealthPath = "ui\\ui_body_health%s.xml"
local maingamePath   = "ui\\maingame%s.xml"
local sidHudPath     = "ui\\ui_sidhud_component%s.xml"

local HUD_BOUNDS


-- the HUD background is huge and skews the 'offset' and 'scale' settings
-- so the actual bounds is calculated using visible HUD elements  and
-- shared with the other parsers
function getHudBounds(DXML)
  -- filter only the elements we care about
  local bounds = DART.ipairscb(DXML:getRoot().kids, function(child)
    local name = DXML:getElementName(child)
    if
      name:match("^bhs_")
      and not name:match("_43$")
      and not name:match("_1610$")
    then
      return child
    end
  end)
  print_r(bounds)

  HUD_BOUNDS = DART.getBoundingBox(DXML, bounds)
end

-- evaluate settings based on HUD_BOUNDS
function collectSettings()
  local settings = {}
  copy_table(settings, DART.HEALTH_HUD)

  if not settings.offset then
    settings.offset = {
      x = HUD_BOUNDS.l,
      y = HUD_BOUNDS.b - DART.baseHeight,
    }
  end
  
  if not settings.scale then
    settings.scale = DART.scale
  end

  return settings
end


function parseDXMLCustomMsgs(DXML, xmlAspectRatio)
  local factor   = DART.getAspectRatio() / xmlAspectRatio
  local settings = collectSettings()

  local offset, scale, baseHeight =
    settings.offset,
    settings.scale,
    DART.baseHeight

  DXML:iterateChildren(DXML:getRoot(), function(child)
    if not DXML:isElement(child) then
      return
    end

    local name  = DXML:getElementName(child)
    local attrs = DXML:getElementAttr(child)
    -- log("Iter " .. name)
    if
      not name:match("^bhs_")
      and not name:match("^body_health_")
      or name:match("_43$")
      or name:match("_1610$")
    then
      return
    end

    -- Save BHS parent container y position for fixing news positioning in modxml_dart_news
    if name ~= "body_health_system" then
      local hud_health_system_offset = baseHeight + offset.y - 1 * (HUD_BOUNDS.b - attrs.y)
      DART.hud_health_system_y = hud_health_system_offset - (baseHeight + offset.y - scale * (HUD_BOUNDS.b - attrs.y))
      -- log("hud_health_system_offset " .. hud_health_system_offset)
      -- log("hud_health_system_y " .. DART.hud_health_system_y)
    end

    DART.editAttributes(DXML, child, function(attrs)
      -- log("findme")
      -- log("x = " .. (offset.x + scale * (attrs.x - HUD_BOUNDS.l)) / factor)
      -- log("y = " .. baseHeight + offset.y - scale * (HUD_BOUNDS.b - attrs.y))
      -- log("width = " .. attrs.width * scale / factor)
      -- log("height = " .. attrs.height * scale)
      return {
        x = ((offset.x + scale * (attrs.x - HUD_BOUNDS.l)) / factor) + DART.HUD_SAFE_ZONE,
        y = baseHeight + offset.y - scale * (HUD_BOUNDS.b - attrs.y),
        width  = attrs.width * scale / factor,
        height = attrs.height * scale,
      }
    end)
  end)
end


function parseDXMLBodyHealth(DXML, xmlAspectRatio)
  local factor = DART.getAspectRatio() / xmlAspectRatio
  local scale  = collectSettings().scale

  DXML:iterateChildren(DXML:getRoot(), function(child)
    if not DXML:isElement(child) then
      return
    end

    local name  = DXML:getElementName(child)
    local attrs = DXML:getElementAttr(child)

    if
      not name:match("^bhs_")
      or name:match("_43$")
      or name:match("_1610$")
    then
      return
    end

    DART.editAttributes(DXML, child, function(attrs)
      return {
        width  = attrs.width * scale / factor,
        height = attrs.height * scale
      }
    end)
  end)
end


function parseDXMLMaingame(DXML, xmlAspectRatio)
  local factor   = DART.getAspectRatio() / xmlAspectRatio
  local settings = collectSettings()

  local offset, scale, baseHeight =
    settings.offset,
    settings.scale,
    DART.baseHeight

  local hudStates = DXML:query("hud_states")[1]

  if not hudStates then
    return
  end

  DXML:iterateChildren(hudStates, function(child)
    -- set the psybar to stetch
    if DXML:getElementName(child) == "progress_bar_psy" then
      local progress = DXML:query("progress", child)[1]
      if progress then
        DXML:setElementAttr(progress, {stretch = 1})
      end
    end

    DART.editAttributes(DXML, child, function(attrs)
      return {
        x = ((offset.x + scale * (attrs.x - HUD_BOUNDS.l)) / factor) + DART.HUD_SAFE_ZONE,
        y = baseHeight + offset.y - scale * (HUD_BOUNDS.b - attrs.y),
        width  = attrs.width * scale / factor,
        height = attrs.height * scale,
      }
    end)
  end)
end


-- the radbar behaves bizarrely when moved or resized
-- so we have to tweak some XML values
function parseDXMLSidHud(DXML, xmlAspectRatio)
  local factor   = DART.getAspectRatio() / xmlAspectRatio
  local settings = collectSettings()

  local offset, scale, baseHeight =
    settings.offset,
    settings.scale,
    DART.baseHeight

  local sidhud    = DXML:query("sidhud")[1]
  local radHealth = DXML:query("sidhud > rad_health")[1]
  local value     = DXML:query("sidhud > rad_health > value")[1]

  if not (sidhud and radHealth and value) then
    return
  end

  DART.editAttributes(DXML, radHealth, function(attrs)
    -- move sidhud's 'y' value to radHealth
    attrs.y = attrs.y + (DXML:getElementAttr(sidhud).y or 0)

    -- tweaks to look better
    if attrs.x == "13" then
      attrs.x = attrs.x + 1
    end
    if attrs.height == "2" then
      attrs.height = attrs.height + 1
    end

    return attrs
  end)

  DXML:setElementAttr(sidhud, {y = 0})

  DART.editAttributes(DXML, value, function(attrs)
    attrs.x = 0

    -- tweaks to look better
    if attrs.width == "70" then
      attrs.width = attrs.width + 1
    end
    if attrs.height == "2" then
      attrs.height = attrs.height + 1
    end

    return attrs
  end)

  DART.editAttributes(DXML, radHealth, function(attrs)
    return {
      x = ((offset.x + scale * (attrs.x - HUD_BOUNDS.l)) / factor) + DART.HUD_SAFE_ZONE,
      y = baseHeight + offset.y - scale * (HUD_BOUNDS.b - attrs.y),
      width  = attrs.width * scale / factor,
      height = attrs.height * scale,
    }
  end)

  DART.editAttributes(DXML, value, function(attrs)
    return {
      width  = attrs.width * scale / factor,
      height = attrs.height * scale,
    }
  end)
end


function onXMLReadCustomMsgs(filename, DXML)
  local postfix = DART.checkFilename(filename, customMsgsPath)

  if not postfix then
    return
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  -- ui_custom_msgs.xml is actually 16:9
  if postfix == "_43" then
    postfix = "_16"
  end

  log("Parsing " .. filename)
  log("Postfix " .. postfix)

  -- calculate HUD_BOUNDS first
  if not HUD_BOUNDS then
    getHudBounds(DXML)
  end

  parseDXMLCustomMsgs(DXML, DART.aspectRatioLookup[postfix])
  cache.set(filename, DXML)
end


function onXMLReadBodyHealth(filename, DXML)
  local postfix = DART.checkFilename(filename, bodyHealthPath)

  if not postfix then
    return
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  -- ui_body_health.xml is actually 16:9
  if postfix == "_43" then
    postfix = "_16"
  end

  -- force HUD_BOUNDS to be calculated
  if not HUD_BOUNDS then
    CScriptXmlInit():ParseFile("ui_custom_msgs.xml")
  end

  log("Parsing " .. filename)

  parseDXMLBodyHealth(DXML, DART.aspectRatioLookup[postfix])
  cache.set(filename, DXML)
end


function onXMLReadMaingame(filename, DXML)
  local postfix = DART.checkFilename(filename, maingamePath)

  if not postfix then
    return
  end

  -- force maingame_16.xml
  if postfix == "_43" then
    log("Replacing maingame.xml with maingame_16.xml")
    return DART.replaceDXML(DXML, string.format(maingamePath, "_16"))
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  -- force HUD_BOUNDS to be calculated
  if not HUD_BOUNDS then
    CScriptXmlInit():ParseFile("ui_custom_msgs.xml")
  end

  log("Parsing " .. filename)

  parseDXMLMaingame(DXML, DART.aspectRatioLookup[postfix])
  cache.set(filename, DXML)
end


function onXMLReadSidHud(filename, DXML)
  local postfix = DART.checkFilename(filename, sidHudPath)

  if not postfix then
    return
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  -- ui_body_health.xml is actually 16:9
  if postfix == "_43" then
    postfix = "_16"
  end

  -- force HUD_BOUNDS to be calculated
  if not HUD_BOUNDS then
    CScriptXmlInit():ParseFile("ui_custom_msgs.xml")
  end

  log("Parsing " .. filename)

  parseDXMLSidHud(DXML, DART.aspectRatioLookup[postfix])
  cache.set(filename, DXML)
end


function on_xml_read()
  if DART.getAspectRatioVs16x9() > 1 then
    RegisterScriptCallback("on_xml_read", onXMLReadCustomMsgs)
    RegisterScriptCallback("on_xml_read", onXMLReadBodyHealth)
    RegisterScriptCallback("on_xml_read", onXMLReadMaingame)
    RegisterScriptCallback("on_xml_read", onXMLReadSidHud)
  else
    log("Disabled because aspect ratio is not ultrawide")
  end
end
