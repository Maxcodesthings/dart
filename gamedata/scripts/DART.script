-- global constants
baseWidth  = 1024
baseHeight = 768
aspectRatio4x3 = 4 / 3
aspectRatio16x9 = 16 / 9
aspectRatio21x9 = 21 / 9
aspectRatio32x9 = 32 / 9
enableLogging = true

-- shared globals
DART.HUD_SAFE_ZONE = 0
DART.hud_health_system_y = 0
DART.alticons_x = 0


aspectRatioLookup = {
  _43 = DART.aspectRatio4x3,
  _16 = DART.aspectRatio16x9,
  _21 = DART.aspectRatio21x9,
  _32 = DART.aspectRatio32x9,
}


function cosd(degrees)
  return math.cos(math.rad(degrees))
end


function sind(degrees)
  return math.sin(math.rad(degrees))
end


function abcosd(degrees)
  return math.abs(cosd(degrees))
end


function absind(degrees)
  return math.abs(sind(degrees))
end


function isUsing3DPDA()
  return get_console_cmd(1, "g_3d_pda")
end


function getAspectRatio()
  return device().width / device().height
end


function getAspectRatioVs4x3()
  local ratio = getAspectRatio() / DART.aspectRatio4x3
  return ratio - 0.01 > 1 and ratio or 1
end


function getAspectRatioVs16x9()
  local ratio = getAspectRatio() / DART.aspectRatio16x9
  return ratio - 0.01 > 1 and ratio or 1
end


function getAspectRatioVs21x9()
  local ratio = getAspectRatio() / DART.aspectRatio21x9
  return ratio - 0.01 > 1 and ratio or 1
end


-- create a logger for a module
-- the generated log() accepts a limit to curb spam
function createLogger(module)
  module = (module and module ~= "DART")
    and "DART:" .. module
    or "DART"

  local calls = {}

  return function(message, limit)
    if limit and limit > 0 then
      if not calls[message] then
        calls[message] = 0
      end
      if calls[message] >= limit then
        return
      end
      calls[message] = calls[message] + 1
    end

    printf("[%s] %s", module, message)
  end
end


-- callback version of ipairs
-- you can 'return' instead of 'goto' to continue
-- you can 'return value' to return a new table
-- sort of like a combo of .filter() and .map() in JS
function ipairscb(thing, callback)
  local results

  for index, value in ipairs(thing) do
    local rvalue = callback(value, index, thing)

    if rvalue then
      if not results then
        results = {}
      end
      table.insert(results, rvalue)
    end
  end

  return results
end


-- callback version of pairs
-- you can optionally 'return key, value' to return a new table
function pairscb(thing, callback)
  local results

  for key, value in pairs(thing) do
    local rkey, rvalue = callback(key, value, thing)

    if rkey or rvalue then
      if not results then
        results = {}
      end
      results[rkey or key] = rvalue or value
    end
  end

  return results
end


-- Sets element attrs with a callback that passes current attrs
function editAttributes(DXML, element, callback)
  if not element or not DXML:isElement(element) then
    return
  end

  DXML:setElementAttr(element, callback(
    DXML:getElementAttr(element) or {}
  ))
end


-- replaces the contents of a DXML object with another XML file
-- optionally dispatches the "on_xml_read" callback
function replaceDXML(DXML, path, dispatch)
  local children = {}

  -- can't removeElement() directly here
  DXML:iterateChildren(DXML:getRoot(), function(child)
    table.insert(children, child)
  end)

  for _, child in ipairs(children) do
    DXML:removeElement(child)
  end

  DXML:insertFromXMLFile(path, nil, nil, true)

  if dispatch ~= false then
    dxml_core.xmlDispatch(path, DXML)
  end
end


-- find bounding rectangle of a group of elements
function getBoundingBox(DXML, group)
  local bounds = {}

  ipairscb(group or DXML:getRoot().kids, function(element)
    if not DXML:isElement(element) then
      return
    end

    local attrs = DXML:getElementAttr(element)

    if
      not attrs.x
      or not attrs.y
      or not attrs.width
      or not attrs.height
    then
      return
    end

    local t = attrs.y
    local l = attrs.x
    local r = attrs.x + attrs.width
    local b = attrs.y + attrs.height

    bounds = {
      t = math.min(bounds.t or t, t),
      l = math.min(bounds.l or l, l),
      r = math.max(bounds.r or r, r),
      b = math.max(bounds.b or b, b),
    }
  end)

  return bounds
end


-- merge 2 or more indexed tables
function imerge(...)
  local result = {}
  local args = {...}
  for _, arg in ipairs(args) do
    for _, value in ipairs(arg) do
      result[#result + 1] = value
    end
  end
  return result
end


-- merge 2 or more keyed tables
function merge(...)
  local result = {}
  local args = {...}
  for _, arg in ipairs(args) do
    for key, value in pairs(arg) do
      result[key] = value
    end
  end
  return result
end


-- create a cache object for module
function createCache(module)
  local log = createLogger(module)
  local cache = {}

  local function has(filename)
    return cache[filename] ~= nil
  end

  local function set(filename, DXML)
    log("Saving " .. filename .. " to cache", 1)
    cache[filename] = DXML.xml_table.kids
  end

  local function apply(filename, DXML)
    log("Applying cache to " .. filename, 1)
    DXML.xml_table.kids = cache[filename]
  end

  return {has = has, set = set, apply = apply}
end


-- ensure match and extract aspect ratio postfix
function checkFilename(filename, filepath)
  local pattern = string.format(filepath, "(_?%d?%d?)")
  local postfix = filename:match(pattern)

  return postfix
    and (aspectRatioLookup[postfix] ~= nil and postfix or "_43")
    or nil
end


-- create a reusable function for basic scaling
function createScaleFunction(DXML, scaleFactor)
  return function(element, ...)
    local args = {...}
    DART.editAttributes(DXML, element, function(attrs)
      for _, attr in ipairs(args) do
        attrs[attr] = attrs[attr] / scaleFactor
      end
      return attrs
    end)
  end
end
