DART.SCOPES = {}


local path  = "ui\\scopes%s.xml"
local log   = DART.createLogger("SCOPES")
local cache = DART.createCache("SCOPES")


-- we're not as concerned about xmlAspectRatio here because all known
-- scopes are 1024x768, so we can just scale 1024 to the aspect ratio
-- it's actually better than relying on widths in the XML because those
-- are sloppy and all over the place
function resizeScope(DXML, scope)
  local elements = DXML:query("auto_static", scope)

  -- only handle scopes with 3 parts (main, left, right)
  if not elements or #elements ~= 3 then
    return
  end

  local w1 = tonumber(DXML:getElementAttr(elements[1]).width)
  local w2 = tonumber(DXML:getElementAttr(elements[2]).width)
  local w3 = tonumber(DXML:getElementAttr(elements[3]).width)

  -- skip scopes with textures in the wrong order
  if w1 < w2 or w1 < w3 then
    return
  end

  local textureWidth = DART.baseWidth / DART.getAspectRatioVs4x3()
  local fillerWidth  = (DART.baseWidth - textureWidth) / 2

  -- scope texture
  DXML:setElementAttr(elements[1], {
    x = fillerWidth,
    width = textureWidth,
  })

  -- left filler
  DXML:setElementAttr(elements[2], {
    width = fillerWidth
  })

  -- right filler
  DXML:setElementAttr(elements[3], {
    x = fillerWidth + textureWidth,
    width = fillerWidth,
  })
end


function parseDXML(DXML)
  DXML:iterateChildren(DXML:getRoot(), function(child)
    if DXML:isElement(child) then
      resizeScope(DXML, child)
    end
  end)
end


function onXMLRead(filename, DXML)
  local postfix = DART.checkFilename(filename, path)

  if not postfix then
    return
  end

  if cache.has(filename) then
    return cache.apply(filename, DXML)
  end

  log("Parsing " .. filename)

  parseDXML(DXML)
  cache.set(filename, DXML)
end


function on_xml_read()
  if DART.getAspectRatioVs16x9() > 1 then
    RegisterScriptCallback("on_xml_read", onXMLRead)
  else
    log("Disabled because aspect ratio is not ultrawide")
  end
end
