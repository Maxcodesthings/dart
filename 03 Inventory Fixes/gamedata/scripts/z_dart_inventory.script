DART.INVENTORY = {}


local log = DART.createLogger("INVENTORY")


-- only auto-resize these container IDs (just a best guess)
function shouldAutoResize(container)
  return
    container.ID    == "actor_bag"
    or container.ID == "actor_trade"
    or container.ID == "actor_trade_bag"
    or container.ID == "npc_bag"
    or container.ID == "npc_trade"
    or container.ID == "npc_trade_bag"
end


local utilsUIUICellContainer = utils_ui.UICellContainer.InitControls


-- monkey patch
function utils_ui.UICellContainer:InitControls(owner, prof, ele_base)
  if DART.getAspectRatioVs16x9() <= 1 then
    log("Disabled because aspect ratio is not ultrawide", 1)
    return utilsUIUICellContainer(self, owner, prof, ele_base)
  end

  log("Monkey-patching UICellContainer:InitControls", 1)

  local gridSize = DART.INVENTORY.gridSize or self.grid_size
  local gridLine = DART.INVENTORY.gridLine or self.grid_line

  if shouldAutoResize(self) then
    -- this is a duplicate of what the monkey-patched code does
    -- it's necessary to call container:GetWidth()
    local container = self.use_frame
      and owner.xml:InitFrame(prof, ele_base)
      or owner.xml:InitStatic(prof, ele_base)

    -- calculate how many cells can fit in the given width,
    -- then resize the cells to perfectly fill that space
    local width = container:GetWidth() * DART.getAspectRatioVs4x3()
    local itemsPerRow = math.floor(width / (gridSize + gridLine))
    local cellSize = width / itemsPerRow

    gridSize = cellSize - gridLine
  end

  -- grid_size doesn't stretch to aspect ratio but grid_line does
  self.grid_size = gridSize
  self.grid_line = gridLine / DART.getAspectRatioVs4x3()

  return utilsUIUICellContainer(self, owner, prof, ele_base)
end
